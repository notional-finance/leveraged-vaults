import json
from brownie import BalancerComposableAuraVault, Curve2TokenConvexVault, TradingModule, interface, StrategyUtils
from brownie.network.contract import Contract

def main():
    notional = Contract.from_abi("Notional", "0x1344A36A1B56144C3Bc62E7757377D288fDE0369", abi=interface.NotionalProxy.abi)
    tradingModule = TradingModule.at("0xBf6B9c5608D520469d8c4BD1E24F850497AF0Bb8")

    treasuryManager = Contract.from_abi(
        "Treasury Manager", '0x53144559C0d4a3304e2DD9dAfBD685247429216d',
        abi=json.load(open("abi/TreasuryManager.json"))
    )

    FRAX_USDC_e = Curve2TokenConvexVault.at("0xdb08f663e5D765949054785F2eD1b2aa1e9C22Cf")
    rETH_ETH = BalancerComposableAuraVault.at("0x3Df035433cFACE65b6D68b77CC916085d020C8B8")
    USDC_4POOL = BalancerComposableAuraVault.at("0x8Ae7A8789A81A43566d0ee70264252c0DB826940")

    owner = notional.owner()
    # Upgrade trading module
    tradingModule.upgradeTo("0xe2aC28D510BE49BF46EEB1Ce0aad219099226263", {"from": owner})
    # Upgrade treasury manager
    treasuryManager.upgradeTo("0xf7446F1a408Ac6bD4A22521CcB71ae1C5e5255fA", {"from": owner})
    # Upgrade Convex Vault
    setSettings = FRAX_USDC_e.setStrategyVaultSettings.encode_input((0, 2000, 100, 0))
    FRAX_USDC_e.upgradeToAndCall("0xA99b6375490f6861390CFeb3d18C3F177d325CF9", setSettings, {"from": owner})


    # List all vaults
    rETHConf = "0x69a6d1cc0000000000000000000000003df035433cface65b6d68b77cc916085d020c8b80000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000005f5e100"
    [_, params] = notional.decode_input(rETHConf)
    notional.updateVault(*params, {"from": owner})

    USDCConf = "0x69a6d1cc0000000000000000000000008ae7a8789a81a43566d0ee70264252c0db826940000000000000000000000000000000000000000000000000000000000000002300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000746a528800"
    [_, params] = notional.decode_input(USDCConf)
    notional.updateVault(*params, {"from": owner})